const express = require('express');
const supa = require('@supabase/supabase-js');
const { match } = require('assert');
//use to implement APIs in express
const app = express();

//the url and key for the supabase database
const supaURL = 'https://vswwjngcsacwnqmisrvk.supabase.co';
const supaAPI = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZzd3dqbmdjc2Fjd25xbWlzcnZrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3OTUyNTYsImV4cCI6MjAyNDM3MTI1Nn0.1v11GLRYNnkrc-rBr5knHMoz0evQ9Bzh1iBTxe2hgn8';

const supabase = supa.createClient(supaURL, supaAPI);
const jsonMessage = (msg) => { return {message: msg }};
//using the query builder API to get the SQL statements

/*
/   Returns the seasons supported by the API 
*/
app.get('/api/seasons', async(req, resp) => {
    const {data, error} = await supabase
        .from('seasons')
        .select();
    resp.json(data);
});

/*
/   Returns all the circuits
*/
app.get('/api/circuits', async(req, resp) => {
    const {data, error} = await supabase
        .from('circuits')
        .select();
    resp.json(data);
});

/*
/   Returns specified circuit based on the ref provided
*/
app.get('/api/circuits/:ref', async(req, resp) => {
    const {data, error} = await supabase
        .from('circuits')
        .select()
        .eq('circuitRef', req.params.ref);
        if (!data || data.length === 0){
            resp.json( { error: 'No data found for the requested refernce.'});
            return;
        } else { resp.json(data) }
});

/*
/   Returns circuits based on the given year (order by round in ascending order)
*/
app.get('/api/circuits/season/:year', async(req, resp) => {
    const {data, error} = await supabase
        .from('races')
        .select(`round, seasons!inner (year), circuits!inner (circuitId, circuitRef, name, location, country, lat, lng, alt, url)`)
        .eq('seasons.year', req.params.year)
        .order('round', { ascending : true });
    resp.json(data);
});

/*
/   Returns all constructors
*/
app.get('/api/constructors', async(req, resp) => {
    const {data, error} = await supabase
        .from('constructors')
        .select()
    resp.json(data);
});

/*
/   Returns specified constructor based on the ref provided
*/
app.get('/api/constructors/:ref', async(req, resp) => {
    const {data, error} = await supabase
        .from('constructors')
        .select()
        .eq('constructorRef', req.params.ref);
        if (!data || data.length === 0){
            resp.json( { error: 'No data found for the requested refernce.'});
            return;
        } else { resp.json(data) }
});

/*
/   Returns all drivers
*/
app.get('/api/drivers', async(req, resp) => {
    const {data, error} = await supabase
        .from('drivers')
        .select()
    resp.json(data);
});

/*
/   Returns specified driver based on the ref provided
*/
app.get('/api/drivers/:ref', async(req, resp) => {
    const {data, error} = await supabase
        .from('drivers')
        .select()
        .eq('driverRef', req.params.ref);
        if (!data || data.length === 0){
            resp.json( { error: 'No data found for the requested refernce.'});
            return;
        } else { resp.json(data) }
});

/*
/   Returns drivers whose surname (case insensitive) begins with provided substring
*/
app.get('/api/drivers/search/:substring', async(req, resp) => {
    const {data, error} = await supabase
        .from('drivers')
        .select()
        .ilike('surname', `${req.params.substring.toLocaleLowerCase()}%`);
    resp.json(data);
});


/*
/   Returns drivers within a given race
*/
app.get('/api/drivers/race/:raceId', async(req, resp) => {
    const {data, error} = await supabase
        .from('qualifying')
        .select(`races!inner (raceId), drivers!inner (driverId, driverRef, number, code, forename, surname,dob, nationality, url)`)
        .eq('races.raceId', req.params.raceId);
    resp.json(data);
});

/*
/   Returns the specified race
/   DO NOT provide the foreign key for the circuit (provide circuit name, location and country)
*/
app.get('/api/races/:raceId', async(req, resp) => {
    const {data, error} = await supabase
        .from('races')
        .select(`raceId, year, round, name, date, time, url, circuits(name, location, country)`)
        .eq('raceId', req.params.raceId);
    resp.json(data);
});

/*
/   Returns races within a given season, ordered by round
*/
app.get('/api/races/season/:year', async(req, resp) => {
    const {data, error} = await supabase
        .from('races')
        .select(`seasons!inner(year), raceId, round, name, date, time, url`)
        .eq('seasons.year', req.params.year)
        .order('round');

    resp.json(data);
});


/*
/   Returns a specific race within a given season specified by the round number
*/
app.get('/api/races/season/:year/:round', async(req, resp) => {
    const {data, error} = await supabase
        .from('races')
        .select(`seasons!inner(year), raceId, round, name, date, time, url`)
        .eq('seasons.year', req.params.year )
        .eq('round', req.params.round);
    resp.json(data);
});

/*
/   Returns all races for a given circuit, order by year 
*/
app.get('/api/races/circuits/:ref', async(req, resp) => {
    const {data, error} = await supabase
        .from('races')
        .select(`circuits!inner(circuitRef), raceId, year, round, name, date, time, url`)
        .eq('circuits.circuitRef', req.params.ref );
        if (!data || data.length === 0){
            resp.json( { error: 'No data found for the requested refernce.'});
            return;
        } else { resp.json(data) }
});

/*
/   Returns all races for a given circuit between two years 
*/
app.get('/api/races/circuits/:ref/season/:start/:end', async(req, resp) => {
    const {data, error} = await supabase
        .from('races')
        .select(`circuits!inner(circuitRef), seasons!inner(year), raceId, round, name, date, time, url`)
        .eq('circuits.circuitRef', req.params.ref )
        .filter('seasons.year','gte', req.params.start)
        .filter('seasons.year', 'lte', parseInt(req.params.end));
        if (parseInt(req.params.end) < parseInt(req.params.start)){
            return resp.json( { error: 'End year must not be earlier than the start year.'});
        }
        else if (!data || data.length === 0) {
            return resp.json( { error: 'No data found for the requested parameters.'});
        } 
        else if ('seasons.year' < parseInt(req.param.start)){
            return resp.json( { error: 'No data found for the requested parameters.'});
        }
         else { resp.json(data) }
});

/*
/   Returns the results of the specified race 
/   Don't provide the foreign keys for the race, drive and constructor
/   Instead provide the following: 
/       - driver: driverRef, code, forename, surname
/       - race: name, round, year, date
/       - constructor: name, constructorRef, nationality
*/
app.get('/api/results/:raceId', async(req, resp) => {
    const {data, error} = await supabase
        .from('results')
        .select(`resultId,number,grid,position,positionText,positionOrder,points,laps,time,milliseconds,fastestLap,rank,fastestLapTime,fastestLapSpeed,statusId, drivers!inner(driverRef,code,forename,surname), races!inner(name,round,year,date), constructors!inner(name,constructorRef,nationality)`)
        .eq('races.raceId', req.params.raceId )
        .order('grid', { ascending: true });
    resp.json(data);
});

/*
/   Returns all results for a given driver
*/
app.get('/api/results/driver/:ref', async(req, resp) => {
    const {data, error} = await supabase
        .from('results')
        .select(`*, drivers!inner (driverRef)`)
        .eq('drivers.driverRef', req.params.ref.toLocaleLowerCase() );
        if (!data || data.length === 0){
            resp.json( { error: 'No data found for the requested refernce.'});
            return;
        } else { resp.json(data) }
});

/*
/   Returns all results for a given driver between two years
*/
app.get('/api/results/driver/:ref/seasons/:start/:end', async(req, resp) => {
    const {data, error} = await supabase
        .from('results')
        .select(`*, drivers!inner(driverRef), races!inner(year)`)
        .gte('races.year', req.params.start)
        .lte('races.year', req.params.end)
        .eq('drivers.driverRef', req.params.ref);
        
        if (parseInt(req.params.end) < parseInt(req.params.start)){
            return resp.json( { error: 'End year must not be earlier than the start year.'});
        }
        else if (!data || data.length === 0) {
            return resp.json( { error: 'No data found for the requested parameters.'});
        } 
        else if ('seasons.year' < parseInt(req.param.start)){
            return resp.json( { error: 'No data found for the requested parameters.'});
        }
        else { resp.json(data) }
});

/*
/   Returns the qualifying results for the specified race
/   Provide the same fields as with results (table) for the foreign keys
/   Sort by position in ascending order
*/
app.get('/api/qualifying/:raceId', async(req, resp) => {
    const {data, error} = await supabase
        .from('qualifying')
        .select(`*, races!inner(raceId)`)
        .eq('races.raceId', req.params.raceId)
        .order('position', {ascending:true});
    resp.json(data);
});


// app.get('/api/qualifying/:raceId', async(req, resp) => {
//     const {data, error} = await supabase
//         .from('races')
//         .select(`qualifying!inner(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3), raceId`)
//         .eq('qualifying.raceId', req.params.raceId)
//         // .order('position', {ascending:true});
//     resp.json(data);
// });

/*
/   Returns the current season driver standings table for the specified race
/   Sort by position in ascending order
/   Provide the same fields as with results (table) for the driver
*/
app.get('/api/standings/:raceId/drivers', async(req, resp) => {
    const {data, error} = await supabase
        .from('driver_standings')
        .select(`*, races!inner(raceId, year), drivers!inner(driverId)`)
        .eq('races.raceId', req.params.raceId)
        .order('position', {ascending:true});
    resp.json(data);
});


/*
/   Returns the current season constructor standings table for the specified race
/   Sort by position in ascending order
/   Provide the same fields as with results (table) for the constructor
*/
app.get('/api/standings/:raceId/constructors', async(req, resp) => {
    const {data, error} = await supabase
        .from('constructor_standings')
        .select(`*, races!inner(raceId, year)`)
        .eq('races.raceId', req.params.raceId)
        .order('position', {ascending:true});
    resp.json(data);

});




//Port
app.listen(8080, () => {
    console.log('Listening on Port:8080');
    console.log('http://localhost:8080/api/');
})

