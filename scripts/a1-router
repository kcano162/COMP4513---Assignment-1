const express = require('express');
const supa = require('@supabase/supabase-js');
const { match } = require('assert');
//use to implement APIs in express
const app = express();

//the url and key for the supabase database
const supaURL = 'https://vswwjngcsacwnqmisrvk.supabase.co';
const supaAPI = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZzd3dqbmdjc2Fjd25xbWlzcnZrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3OTUyNTYsImV4cCI6MjAyNDM3MTI1Nn0.1v11GLRYNnkrc-rBr5knHMoz0evQ9Bzh1iBTxe2hgn8';

const supabase = supa.createClient(supaURL, supaAPI);
const jsonMessage = (msg) => { return {message: msg }};

/**
*   Error handling function 
*   @param  data     The query data being queried
*   @param  response Resp parameter
*/
function errorMsg(data, response){
    if (!data || data.length === 0){
        response.json( { error: 'No data found for the requested reference.'});
        return;
    } else { response.json(data) }
}

/** 
*   Error handling function for queries with start and end parameters
*   @param  data     The query data being queried
*   @param  response Resp parameter
*   @param  req      Requested object 
*/ 
function errorParameterMsg(data, resp, req){
    if (parseInt(req.params.end) < parseInt(req.params.start)){
        return resp.json( { error: 'End year must not be earlier than the start year.'});
    }
    else if (!data || data.length === 0) {
        return resp.json( { error: 'No data found for the requested parameters.'});
    } 
    else if ('seasons.year' < parseInt(req.param.start)){
        return resp.json( { error: 'No data found for the requested parameters.'});
    }
     else { resp.json(data) }
}

//API SQL statements
/*
/   Returns the seasons supported by the API 
*/
const handleAllSeasons = (app) => {
    app.get('/api/seasons', async(req, resp) => {
        const {data, error} = await supabase
            .from('seasons')
            .select();
        resp.json(data);
    });
};

/*
/   Returns all the circuits in the circuits table
*/
const handleAllCircuits = (app) => {
    app.get('/api/circuits', async(req, resp) => {
        const {data, error} = await supabase
            .from('circuits')
            .select();
        resp.json(data);
    });
};
/*
/   Returns specified circuit based on the ref provided
*/
const handleCircuit = (app) => {
    app.get('/api/circuits/:ref', async(req, resp) => {
        const {data, error} = await supabase
            .from('circuits')
            .select()
            .eq('circuitRef', req.params.ref);
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns circuits based on the given year (order by round in ascending order)
*/
const handleCircuitsInYear = (app) => {
    app.get('/api/circuits/season/:year', async(req, resp) => {
        const {data, error} = await supabase
            .from('races')
            .select(`round, seasons!inner(year, url), circuits!inner(*)`)
            .eq('seasons.year', req.params.year)
            .order('round', { ascending : true });
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns all constructors
*/
const handleAllConstructors = (app) => {
    app.get('/api/constructors', async(req, resp) => {
        const {data, error} = await supabase
            .from('constructors')
            .select()
        resp.json(data);
    });
};

/*
/   Returns specified constructor based on the ref provided
*/
const handleConstructor = (app) => {
    app.get('/api/constructors/:ref', async(req, resp) => {
        const {data, error} = await supabase
            .from('constructors')
            .select()
            .eq('constructorRef', req.params.ref.toLocaleLowerCase());
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns all drivers
*/
const handleAllDrivers = (app) => {
    app.get('/api/drivers', async(req, resp) => {
        const {data, error} = await supabase
            .from('drivers')
            .select()
        resp.json(data);
    });
};

/*
/   Returns specified driver based on the ref provided
*/
const handleDriver = (app) => {
    app.get('/api/drivers/:ref', async(req, resp) => {
        const {data, error} = await supabase
            .from('drivers')
            .select()
            .eq('driverRef', req.params.ref);
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns drivers whose surname (case insensitive) begins with provided substring
*/
const handleDriverSearch = (app) => {
    app.get('/api/drivers/search/:substring', async(req, resp) => {
        const {data, error} = await supabase
            .from('drivers')
            .select()
            .ilike('surname', `${req.params.substring.toLocaleLowerCase()}%`);
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns drivers within a given race
*/
const handleDriveRace = (app) => {
    app.get('/api/drivers/race/:raceId', async(req, resp) => {
        const {data, error} = await supabase
            .from('results')
            .select(`races!inner(raceId, name, year), drivers!inner (*)`)
            .eq('races.raceId', req.params.raceId);
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns the specified race
/   DO NOT provide the foreign key for the circuit (provide circuit name, location and country)
*/
const handleRace = (app) => {
    app.get('/api/races/:raceId', async(req, resp) => {
        const {data, error} = await supabase
            .from('races')
            .select(`*, circuits(name, location, country)`)
            .eq('raceId', req.params.raceId);
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns races within a given season, ordered by round
*/
const handleRaceInYear = (app) => {
    app.get('/api/races/season/:year', async(req, resp) => {
        const {data, error} = await supabase
            .from('races')
            .select(`*, seasons!inner(year, url)`)
            .eq('seasons.year', req.params.year)
            .order('round');
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns a specific race within a given season specified by the round number
*/
const handleRaceInYearAndRound = (app) => {
    app.get('/api/races/season/:year/:round', async(req, resp) => {
        const {data, error} = await supabase
            .from('races')
            .select(`*, seasons!inner(year, url)`)
            .eq('seasons.year', req.params.year )
            .eq('round', req.params.round);
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns all races for a given circuit, order by year 
*/
const handleRaceInCircuit = (app) => {
    app.get('/api/races/circuits/:ref', async(req, resp) => {
        const {data, error} = await supabase
            .from('races')
            .select(`*,circuits!inner(circuitRef, name, country, location)`)
            .eq('circuits.circuitRef', req.params.ref );
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns all races for a given circuit between two years 
*/
const handleRaceInCircuitsBetween = (app) => {
    app.get('/api/races/circuits/:ref/season/:start/:end', async(req, resp) => {
        const {data, error} = await supabase
            .from('races')
            .select(`*,circuits!inner(circuitRef, name, country, location), seasons!inner(year, url)`)
            .eq('circuits.circuitRef', req.params.ref )
            .lte('seasons.year', req.params.end)
            .gte('seasons.year', req.params.start);
            
        //call errorMsg function that handles 2 parameters 
        errorParameterMsg(data, resp, req);
    });
};

/*
/   Returns all results for specified race 
*/
const handleRaceResult = (app) => {
    app.get('/api/results/:raceId', async(req, resp) => {
        const {data, error} = await supabase
            .from('results')
            .select(`*, drivers!inner(driverRef,code,forename,surname), races!inner(name,round,year,date), constructors!inner(name,constructorRef,nationality)`)
            .eq('races.raceId', req.params.raceId )
            .order('grid', { ascending: true });
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns all results for a given driver
*/
const handleAllDriverResult = (app) => {
    app.get('/api/results/driver/:ref', async(req, resp) => {
        const {data, error} = await supabase
            .from('results')
            .select(`*, drivers!inner (code, surname, forename, driverRef)`)
            .eq('drivers.driverRef', req.params.ref.toLocaleLowerCase() );
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns all results for a given driver between two years
*/
const handleDriverResultBetween = (app) => {
    app.get('/api/results/driver/:ref/seasons/:start/:end', async(req, resp) => {
        const {data, error} = await supabase
            .from('results')
            .select(`*, drivers!inner(code, surname, forename, driverRef), races!inner(date, name, year, round)`)
            .gte('races.year', req.params.start)
            .lte('races.year', req.params.end)
            .eq('drivers.driverRef', req.params.ref);
        //call errorMsg function that handles 2 parameters 
        errorParameterMsg(data, resp, req);
    });
};

/*
/   Returns the qualifying results for the specified race
/   Provide the same fields as with results (table) for the foreign keys
/   Sort by position in ascending order
*/
const handleQualifyingRace = (app) => {
    app.get('/api/qualifying/:raceId', async(req, resp) => {
        const {data, error} = await supabase
            .from('qualifying')
            .select(`*, races!inner(date, name, year, round), drivers!inner(code, surname, forename, driverRef)`)
            .eq('races.raceId', req.params.raceId)
            .order('position', {ascending:true});
        //call errorMsg function 
        errorMsg(data, resp);
    });
};

/*
/   Returns the current season driver standings table for the specified race
/   Sort by position in ascending order
/   Provide the same fields as with results (table) for the driver
*/
const handleDriverStanding = (app) => {
    app.get('/api/standings/:raceId/drivers', async(req, resp) => {
        const {data, error} = await supabase
            .from('driver_standings')
            .select(`*, races!inner(date, year, name, round), drivers!inner(code, surname, forename, driverRef)`)
            .eq('raceId', req.params.raceId)
            .order('position', {ascending:true});
        //call errorMsg function 
        errorMsg(data, resp);
    });
}

/*
/   Returns the current season constructor standings table for the specified race
/   Sort by position in ascending order
/   Provide the same fields as with results for the constructor
*/
const handleConstructorStanding = (app) => {
    app.get('/api/standings/:raceId/constructors', async(req, resp) => {
        const {data, error} = await supabase
            .from('constructor_standings')
            .select(`*, races!inner(raceId, year), constructors!inner(name, constructorRef, nationality)`)
            .eq('raceId', req.params.raceId)
            .order('position', {ascending:true});
        //call errorMsg function 
        errorMsg(data, resp);    
    });
};

//export routings to a1-router
// module.exports = {
//     handleAllSeasons,
//     handleAllCircuits,
//     handleCircuit,
//     handleCircuitsInYear,
//     handleAllConstructors,
//     handleConstructor,
//     handleAllDrivers,
//     handleDriver,
//     handleDriverSearch,
//     handleDriveRace,
//     handleRace,
//     handleRaceInYear,
//     handleRaceInYearAndRound,
//     handleRaceInCircuit,
//     handleRaceInCircuitsBetween,
//     handleRaceResult,
//     handleAllDriverResult,
//     handleDriverResultBetween,
//     handleQualifyingRace,
//     handleDriverStanding,
//     handleConstructorStanding
// };


//Port
let port = 8080;
app.listen(port, () => {
    console.log("listening on port " + port);
});
